<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: technical | Sasha Laundy]]></title>
  <link href="http://sursh.github.com/blog/categories/technical/atom.xml" rel="self"/>
  <link href="http://sursh.github.com/"/>
  <updated>2015-03-12T21:10:16-04:00</updated>
  <id>http://sursh.github.com/</id>
  <author>
    <name><![CDATA[Sasha Laundy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[I'm switching to vim]]></title>
    <link href="http://sursh.github.com/blog/2014/08/27/switching-to-vim/"/>
    <updated>2014-08-27T09:31:00-04:00</updated>
    <id>http://sursh.github.com/blog/2014/08/27/switching-to-vim</id>
    <content type="html"><![CDATA[<p>I should really have switched to vim ten years ago when I first started using the command line. But vim has a hell of a hill to get over, and I never made it high enough to keep going. I'm revisiting it because I love keyboard shortcuts! Once they're in your brain, you hardly have to think to move the whole program around at a blazing speed. Then you get to feel like a wizard.</p>

<p>Starting August 1, I deleted my symlink to <code>subl</code> and went cold turkey. It's slowed me down pretty significantly, but that's been a great incentive to set aside time every day to learn new vim stuff, and investing in the tools you use all day every day is always a great investment. I still feel pretty clumsy, but I now find myself editing non-code things in vim! Which is a good sign!</p>

<h2>Resources I'm Using</h2>

<ul>
<li><p>I've been working my way through <a href="http://www.amazon.com/Practical-Vim-Thought-Pragmatic-Programmers/dp/1934356980/">Practical Vim</a>, which is great at getting you <em>thinking</em> in the vim way. I suspect this will make me effective much faster than just googling for things as they come up.</p></li>
<li><p>When I want to look something up on the fly, Google usually points me to the <a href="http://vim.wikia.com/wiki/">Vim tips wiki</a>, which is <em>encyclopedic</em> for one-off solutions and quick fixes, even if they're not well contextualized.</p></li>
<li><p>I've been pestering my colleagues, developer friends, and other Hacker School folks for their favorite config and tips and tricks, which has been very fruitful.</p></li>
</ul>


<p>ALSO, I bought the domain thedailyvim.com, and am considering setting up a daily tips feed there. <a href="https://twitter.com/SashaLaundy">Send me a tweet</a> if that's something you'd be interested in!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HOWTO force all Django users to log out with the Django ORM]]></title>
    <link href="http://sursh.github.com/blog/2014/08/26/howto-force-all-django-users-to-log-out-with-the-django-orm/"/>
    <updated>2014-08-26T09:42:00-04:00</updated>
    <id>http://sursh.github.com/blog/2014/08/26/howto-force-all-django-users-to-log-out-with-the-django-orm</id>
    <content type="html"><![CDATA[<p>I recently hit a bug with <a href="http://blaggregator.us">Blaggregator</a>, a Django app I'm running in production on Heroku, and the fix needed each user to log out and then log back in for it to take effect.</p>

<p>So how to log out all users at once? A bunch of threads around the internet suggested deleting the Session table, as that stores all session information for users (that they are logged in, shopping cart info, etc). That's easy enough with the <code>dbshell</code>, but I'm hitting a weird psql bug on Heroku that I don't have time to diagnose, and plus, working directly in the dbshell makes me feel icky. So here's how to force all Django users to log out on your Heroku-backed app using the ORM, which is one layer of abstraction farther from shooting yourself in the foot.</p>

<p><em>Be careful</em> since this can have adverse effects for your customers (remove items in a shopping cart, etc). It will also confuse and annoy visitors who are currently on your site. There are more graceful ways to accomplish this, but in my case it was quick and effective. I'm not storing anything important in the Session for Blaggregator, and the site has &lt; 1,000 users as it's constrained by the total size of the Hacker School alumni population. That's a small enough number that none of them were on the site yesterday early morning when I was deploying. So this was a quick and dirty way to deploy the fix and make sure it was applied.</p>

<p>To get started, fire up the Heroku Django shell:</p>

<p><code>bash
$ heroku run python manage.py shell
</code></p>

<p>When you get the Django shell prompt (<code>&gt;&gt;&gt;</code>), then you can import the Session model. (If you want to go read the code, the module name tells you where to look: <em>django.contrib.sessions</em>.<strong>models</strong> looks in your virtualenv's lib/python2.7/site-packages/<em>django/contrib/sessions/</em> for <strong>models</strong>.py)</p>

<p>``` bash</p>

<blockquote><blockquote><blockquote><p>from django.contrib.sessions.models import Session
```</p></blockquote></blockquote></blockquote>

<p>Now, you can iterate through all the Session objects and delete them. (caution!)</p>

<p>``` bash</p>

<blockquote><blockquote><blockquote><p>for s in Session.objects.all():
...   s.delete()
```</p></blockquote></blockquote></blockquote>

<p>Or, as <a href="https://twitter.com/jacobian/status/504272832231395328">Jacob Kaplan-Moss pointed out</a>, if you delete them straight from that queryset, you not only win at code golf, but the query will be faster due to how Querysets work under the hood:</p>

<p>``` bash</p>

<blockquote><blockquote><blockquote><p>Session.objects.all().delete()
```</p></blockquote></blockquote></blockquote>

<p>See our <a href="https://twitter.com/jacobian/status/504272832231395328">Twitter conversation</a> or the Django docs if you want more info on Querysets.</p>

<p>Congradulations!  Your site is now very lonely.</p>
]]></content>
  </entry>
  
</feed>
